// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: export.proto

package export

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FinalizeRequest struct {
	ExporterResponse map[string]string `protobuf:"bytes,1,rep,name=ExporterResponse,proto3" json:"ExporterResponse,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FinalizeRequest) Reset()      { *m = FinalizeRequest{} }
func (*FinalizeRequest) ProtoMessage() {}
func (*FinalizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aa074eea61e559c, []int{0}
}
func (m *FinalizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizeRequest.Merge(m, src)
}
func (m *FinalizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *FinalizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizeRequest proto.InternalMessageInfo

func (m *FinalizeRequest) GetExporterResponse() map[string]string {
	if m != nil {
		return m.ExporterResponse
	}
	return nil
}

type FinalizeResponse struct {
}

func (m *FinalizeResponse) Reset()      { *m = FinalizeResponse{} }
func (*FinalizeResponse) ProtoMessage() {}
func (*FinalizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aa074eea61e559c, []int{1}
}
func (m *FinalizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizeResponse.Merge(m, src)
}
func (m *FinalizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *FinalizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*FinalizeRequest)(nil), "moby.cloud.v1.FinalizeRequest")
	proto.RegisterMapType((map[string]string)(nil), "moby.cloud.v1.FinalizeRequest.ExporterResponseEntry")
	proto.RegisterType((*FinalizeResponse)(nil), "moby.cloud.v1.FinalizeResponse")
}

func init() { proto.RegisterFile("export.proto", fileDescriptor_3aa074eea61e559c) }

var fileDescriptor_3aa074eea61e559c = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xad, 0x28, 0xc8,
	0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcd, 0xcd, 0x4f, 0xaa, 0xd4, 0x4b,
	0xce, 0xc9, 0x2f, 0x4d, 0xd1, 0x2b, 0x33, 0x54, 0xda, 0xc1, 0xc8, 0xc5, 0xef, 0x96, 0x99, 0x97,
	0x98, 0x93, 0x59, 0x95, 0x1a, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x94, 0xc0, 0x25, 0xe0,
	0x0a, 0xd6, 0x92, 0x5a, 0x14, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0xc1, 0xa8, 0xc0,
	0xac, 0xc1, 0x6d, 0x64, 0xa2, 0x87, 0xa2, 0x5b, 0x0f, 0x4d, 0xa7, 0x1e, 0xba, 0x36, 0xd7, 0xbc,
	0x92, 0xa2, 0xca, 0x20, 0x0c, 0xd3, 0xa4, 0x9c, 0xb9, 0x44, 0xb1, 0x2a, 0x15, 0x12, 0xe0, 0x62,
	0xce, 0x4e, 0xad, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x85, 0x44, 0xb8, 0x58,
	0xcb, 0x12, 0x73, 0x4a, 0x53, 0x25, 0x98, 0xc0, 0x62, 0x10, 0x8e, 0x15, 0x93, 0x05, 0xa3, 0x92,
	0x10, 0x97, 0x00, 0xc2, 0x7e, 0x88, 0x21, 0x46, 0xb1, 0x5c, 0x7c, 0x10, 0x83, 0x9d, 0x13, 0x73,
	0x72, 0x92, 0x12, 0x93, 0xb3, 0x85, 0xbc, 0xb9, 0x38, 0x60, 0xaa, 0x84, 0xe4, 0xf0, 0x3b, 0x5f,
	0x4a, 0x1e, 0xa7, 0x3c, 0xc4, 0x78, 0x27, 0x9b, 0x0b, 0x0f, 0xe5, 0x18, 0x6e, 0x3c, 0x94, 0x63,
	0xf8, 0xf0, 0x50, 0x8e, 0xb1, 0xe1, 0x91, 0x1c, 0xe3, 0x8a, 0x47, 0x72, 0x8c, 0x27, 0x1e, 0xc9,
	0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8b, 0x47, 0x72, 0x0c, 0x1f, 0x1e,
	0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51,
	0x6c, 0x90, 0x08, 0x48, 0x62, 0x03, 0xc7, 0x80, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xe8,
	0x47, 0x9a, 0x91, 0x01, 0x00, 0x00,
}

func (this *FinalizeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FinalizeRequest)
	if !ok {
		that2, ok := that.(FinalizeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ExporterResponse) != len(that1.ExporterResponse) {
		return false
	}
	for i := range this.ExporterResponse {
		if this.ExporterResponse[i] != that1.ExporterResponse[i] {
			return false
		}
	}
	return true
}
func (this *FinalizeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FinalizeResponse)
	if !ok {
		that2, ok := that.(FinalizeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *FinalizeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&export.FinalizeRequest{")
	keysForExporterResponse := make([]string, 0, len(this.ExporterResponse))
	for k, _ := range this.ExporterResponse {
		keysForExporterResponse = append(keysForExporterResponse, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForExporterResponse)
	mapStringForExporterResponse := "map[string]string{"
	for _, k := range keysForExporterResponse {
		mapStringForExporterResponse += fmt.Sprintf("%#v: %#v,", k, this.ExporterResponse[k])
	}
	mapStringForExporterResponse += "}"
	if this.ExporterResponse != nil {
		s = append(s, "ExporterResponse: "+mapStringForExporterResponse+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FinalizeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&export.FinalizeResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringExport(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExportCallbackClient is the client API for ExportCallback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExportCallbackClient interface {
	Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*FinalizeResponse, error)
}

type exportCallbackClient struct {
	cc *grpc.ClientConn
}

func NewExportCallbackClient(cc *grpc.ClientConn) ExportCallbackClient {
	return &exportCallbackClient{cc}
}

func (c *exportCallbackClient) Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*FinalizeResponse, error) {
	out := new(FinalizeResponse)
	err := c.cc.Invoke(ctx, "/moby.cloud.v1.ExportCallback/Finalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExportCallbackServer is the server API for ExportCallback service.
type ExportCallbackServer interface {
	Finalize(context.Context, *FinalizeRequest) (*FinalizeResponse, error)
}

// UnimplementedExportCallbackServer can be embedded to have forward compatible implementations.
type UnimplementedExportCallbackServer struct {
}

func (*UnimplementedExportCallbackServer) Finalize(ctx context.Context, req *FinalizeRequest) (*FinalizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalize not implemented")
}

func RegisterExportCallbackServer(s *grpc.Server, srv ExportCallbackServer) {
	s.RegisterService(&_ExportCallback_serviceDesc, srv)
}

func _ExportCallback_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportCallbackServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.cloud.v1.ExportCallback/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportCallbackServer).Finalize(ctx, req.(*FinalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExportCallback_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moby.cloud.v1.ExportCallback",
	HandlerType: (*ExportCallbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Finalize",
			Handler:    _ExportCallback_Finalize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "export.proto",
}

func (m *FinalizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExporterResponse) > 0 {
		for k := range m.ExporterResponse {
			v := m.ExporterResponse[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintExport(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintExport(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintExport(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FinalizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintExport(dAtA []byte, offset int, v uint64) int {
	offset -= sovExport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FinalizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExporterResponse) > 0 {
		for k, v := range m.ExporterResponse {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovExport(uint64(len(k))) + 1 + len(v) + sovExport(uint64(len(v)))
			n += mapEntrySize + 1 + sovExport(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FinalizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovExport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExport(x uint64) (n int) {
	return sovExport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FinalizeRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForExporterResponse := make([]string, 0, len(this.ExporterResponse))
	for k, _ := range this.ExporterResponse {
		keysForExporterResponse = append(keysForExporterResponse, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForExporterResponse)
	mapStringForExporterResponse := "map[string]string{"
	for _, k := range keysForExporterResponse {
		mapStringForExporterResponse += fmt.Sprintf("%v: %v,", k, this.ExporterResponse[k])
	}
	mapStringForExporterResponse += "}"
	s := strings.Join([]string{`&FinalizeRequest{`,
		`ExporterResponse:` + mapStringForExporterResponse + `,`,
		`}`,
	}, "")
	return s
}
func (this *FinalizeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FinalizeResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringExport(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FinalizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExporterResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExporterResponse == nil {
				m.ExporterResponse = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthExport
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthExport
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthExport
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthExport
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExport(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthExport
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExporterResponse[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExport = fmt.Errorf("proto: unexpected end of group")
)

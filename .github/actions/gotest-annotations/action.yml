name: 'Go test annotations'
description: 'Annotates failed tests'

inputs:
  dir:
    description: 'Test reports dir'
    required: true

runs:
  using: composite
  steps:
    -
      uses: actions/github-script@v6
      with:
          script: |
            await core.group(`Install npm deps`, async () => {
              await exec.exec('npm', ['install', 'line-by-line']);
            });
    -
      uses: actions/github-script@v6
      with:
        script: |
          const lineReader = require('line-by-line');
          const failedTestsRegex = /(\s*[\w\d]+_test.go:\d+:)(.*?)(Test:\s+Test[\w\d]*?\S+)/gu;
          
          let obj = {};
          const globber = await glob.create(`${{ inputs.dir }}/**/*.json`);
          for await (const jsonReport of globber.globGenerator()) {
            console.log('jsonReport', jsonReport);
            let lr = new lineReader(jsonReport);
            lr.on('line', function(line) {
              console.log('line', line);
              const currentLine = JSON.parse(line);
              const testName = currentLine.Test;
              if (typeof testName === "undefined") {
                return;
              }
              let output = currentLine.Output;
              if (typeof output === "undefined") {
                return;
              }
              output = output.replace("\n", "%0A").replace("\r", "%0D")
              let packageName = currentLine.Package.split("/").slice(3).join("/");
              let newEntry = packageName + "/" + testName;
              if (!obj.hasOwnProperty(newEntry)) {
                obj[newEntry] = output;
              } else {
                obj[newEntry] += output;
              }
            });
            lr.on('end', function() {
              for (const [key, value] of Object.entries(obj)) {
                if (!value.includes("FAIL") || !value.includes("_test.go")) {
                  continue;
                }
                var result;
                while ((result = regex.exec(value)) !== null) {
                  const parts = result[0].split(":");
                  const file = key.split("/").slice(0, -2).join("/") + "/" + parts[0].trimStart();
                  const lineNumber = parts[1];
                  core.error(',', {
                    title: result[0],
                    file: file,
                    startLine: lineNumber
                  });
                }
              }
            });
          }

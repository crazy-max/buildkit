name: build

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 10 * * *'  # everyday at 10am
  workflow_dispatch:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
      - 'dockerfile/*'
  pull_request:
    branches:
      - 'master'
      - 'v*'
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - 'frontend/dockerfile/docs/**'

env:
  REPO_SLUG_ORIGIN: "moby/buildkit:latest"
  REPO_SLUG_TARGET: "moby/buildkit"
  DF_REPO_SLUG_TARGET: "docker/dockerfile-upstream"
  PLATFORMS: "linux/amd64,linux/arm/v7,linux/arm64,linux/s390x,linux/ppc64le,linux/riscv64"
  CACHE_GHA_SCOPE_IT: "integration-tests"
  CACHE_GHA_SCOPE_CROSS: "cross"
  TESTFLAGS: "-v --parallel=6 --timeout=30m"
  BUILDX_VERSION: "v0.9.1"  # leave empty to use the one available on GitHub virtual environment
  GO_VERSION: "1.19"
  DESTDIR: "./bin"

jobs:
  prepare-test:
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Build ${{ env.CACHE_GHA_SCOPE_IT }}
        uses: docker/bake-action@v2
        with:
          targets: integration-tests-base
          set: |
            *.cache-from=type=gha,scope=${{ env.CACHE_GHA_SCOPE_IT }}
            *.cache-to=type=gha,scope=${{ env.CACHE_GHA_SCOPE_IT }}

  test:
    runs-on: ubuntu-20.04
    needs:
      - prepare-test
    strategy:
      fail-fast: false
      matrix:
        pkg:
          - ./client ./cmd/buildctl ./worker/containerd ./solver ./frontend
          - ./frontend/dockerfile
        worker:
          - containerd
          - containerd-rootless
          - containerd-1.5
          - containerd-snapshotter-stargz
          - oci
          - oci-rootless
          - oci-snapshotter-stargz
        typ:
          - integration
          - dockerfile
        exclude:
          - pkg: ./client ./cmd/buildctl ./worker/containerd ./solver ./frontend
            typ: dockerfile
        include:
          - pkg: ./...
            skip-integration-tests: 1
            typ: integration gateway
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Test pkg=${{ matrix.pkg }} ; typ=${{ matrix.typ }} ; skipit=${{ matrix.skip-integration-tests }} ; worker=${{ matrix.worker }}
        run: |
          if [ -n "${{ matrix.worker }}" ]; then
            export TESTFLAGS="${TESTFLAGS} --run=//worker=${{ matrix.worker }}$"
          fi
          ./hack/test ${{ matrix.typ }}
          mv ./coverage/coverage.txt ./coverage/coverage-${{ github.job }}-$(echo "${{ matrix.pkg }}-${{ matrix.skip-integration-tests }}-${{ matrix.typ }}-${{ matrix.worker }}" | tr -dc '[:alnum:]-\n\r' | tr '[:upper:]' '[:lower:]').txt
        env:
          TEST_COVERAGE: 1
          TESTPKGS: ${{ matrix.pkg }}
          SKIP_INTEGRATION_TESTS: ${{ matrix.skip-integration-tests }}
          CACHE_FROM: type=gha,scope=${{ env.CACHE_GHA_SCOPE_IT }}
      -
        name: Upload coverage file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ./coverage

  test-nydus:
    runs-on: ubuntu-20.04
    needs:
      - prepare-test
    strategy:
      fail-fast: false
      matrix:
        pkg:
          - ./client
        worker:
          - containerd
          - oci
        typ:
          - integration
        exclude:
          - pkg: ./client ./cmd/buildctl ./worker/containerd ./solver ./frontend
            typ: dockerfile
        include:
          - pkg: ./...
            skip-integration-tests: 1
            typ: integration
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Test pkg=${{ matrix.pkg }} ; typ=${{ matrix.typ }} ; skipit=${{ matrix.skip-integration-tests }} ; worker=${{ matrix.worker }}
        run: |
          if [ -n "${{ matrix.worker }}" ]; then
            export TESTFLAGS="${TESTFLAGS} --tags=nydus --run=//worker=${{ matrix.worker }}$"
          fi
          ./hack/test ${{ matrix.typ }}
        env:
          BUILDKITD_TAGS: nydus
          TESTPKGS: ${{ matrix.pkg }}
          SKIP_INTEGRATION_TESTS: ${{ matrix.skip-integration-tests }}
          CACHE_FROM: type=gha,scope=${{ env.CACHE_GHA_SCOPE_IT }} type=gha,scope=${{ env.CACHE_GHA_SCOPE_BINARIES }}

  test-s3:
    runs-on: ubuntu-20.04
    needs:
      - prepare-test
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Test
        run: |
          hack/s3_test/run_test.sh

  test-azblob:
    runs-on: ubuntu-20.04
    needs:
      - prepare-test
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Test
        run: |
          hack/azblob_test/run_test.sh

  test-os:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          # - ubuntu-20.04
          # - macOS-11
          - windows-2022
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      -
        name: Go mod
        run: |
          go mod download
      -
        name: Test
        env:
          TMPDIR: ${{ runner.temp }}
          SKIP_INTEGRATION_TESTS: 1
        run: |
          mkdir -p ./coverage
          go test -coverprofile=./coverage/coverage-${{ github.job }}-${{ matrix.os }}.txt -covermode=atomic ${TESTFLAGS} ./...
        shell: bash
      -
        name: Upload coverage file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ./coverage

  upload-coverage:
    runs-on: ubuntu-20.04
    needs: [test, test-os]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Download coverage files
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: ./coverage
      -
        name: List coverage files
        uses: actions/github-script@v6
        id: files
        with:
          result-encoding: string
          script: |
            return require('fs').readdirSync('./coverage', {withFileTypes: true})
              .filter(item => !item.isDirectory())
              .map(item => `./coverage/${item.name}`)
              .join(',');
      -
        name: Send to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ${{ steps.files.outputs.result }}

  cross:
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Build
        uses: docker/bake-action@v2
        with:
          targets: binaries-cross
          set: |
            *.cache-from=type=gha,scope=${{ env.CACHE_GHA_SCOPE_CROSS }}
            *.cache-to=type=gha,scope=${{ env.CACHE_GHA_SCOPE_CROSS }}
            *.output=type=cacheonly

  image:
    runs-on: ubuntu-20.04
    needs:
      - cross
      - test
    strategy:
      fail-fast: false
      matrix:
        target:
          - ''
          - rootless
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        name: Prepare
        run: |
          TAGS=pr
          TAG_SUFFIX=
          PUSH=false
          if [ -n "${{ matrix.target }}" ]; then
            TAG_SUFFIX=-${{ matrix.target }}
          fi
          if [ "${{ github.event_name }}" = "schedule" ]; then
            TAGS=nightly${TAG_SUFFIX}
            PUSH=true
          elif [[ $GITHUB_REF == refs/tags/v* ]]; then
            TAGS="$(./hack/tags ${{ matrix.target }})"
            PUSH=true
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            TAGS=${GITHUB_REF#refs/heads/}${TAG_SUFFIX}
            PUSH=true
          fi
          echo "TAGS<<EOF" >> $GITHUB_ENV
          echo "$TAGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "TAG_SUFFIX=${TAG_SUFFIX}" >> $GITHUB_ENV
          echo "PUSH=${PUSH}" >> $GITHUB_ENV
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REPO_SLUG_TARGET }}
          tags: |
            ${{ env.TAGS }}
          bake-target: meta-helper
      -
        name: Login to Docker Hub
        if: env.PUSH == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build
        uses: docker/bake-action@v2
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: image-all
          set: |
            *.cache-from=type=gha,scope=${{ env.CACHE_GHA_SCOPE_CROSS }}
            *.cache-from=type=gha,scope=image${{ env.TAG_SUFFIX }}
            *.cache-to=type=gha,scope=image${{ env.TAG_SUFFIX }}
            *.output=type=image,buildinfo-attrs=true,push=${{ env.PUSH }}
        env:
          IMAGE_TARGET: ${{ matrix.target }}

  prepare-binaries:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.platforms.outputs.matrix }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Create matrix
        id: platforms
        run: |
          echo "matrix=$(docker buildx bake binaries-cross --print | jq -cr '.target."binaries-cross".platforms')" >> $GITHUB_OUTPUT
      -
        name: Show matrix
        run: |
          echo ${{ steps.platforms.outputs.matrix }}

  binaries:
    runs-on: ubuntu-20.04
    needs:
      - prepare-binaries
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare-binaries.outputs.matrix) }}
    steps:
      -
        name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Build
        uses: docker/bake-action@v2
        with:
          targets: release
          set: |
            *.platform=${{ matrix.platform }}
            *.cache-from=type=gha,scope=binaries-${{ env.PLATFORM_PAIR }}
            *.cache-to=type=gha,scope=binaries-${{ env.PLATFORM_PAIR }}
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: buildkit
          path: ${{ env.DESTDIR }}/*
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs:
      - binaries
      - test
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: buildkit
          path: ${{ env.DESTDIR }}
      -
        name: List artifacts
        run: |
          tree -nh ${{ env.DESTDIR }}
      -
        name: GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: ${{ env.DESTDIR }}/*

  frontend-base:
    runs-on: ubuntu-20.04
    if: github.event_name != 'schedule'
    outputs:
      typ: ${{ steps.prep.outputs.typ }}
      tag: ${{ steps.prep.outputs.tag }}
      push: ${{ steps.prep.outputs.push }}
    steps:
      -
        name: Prepare
        id: prep
        run: |
          TYP=master
          TAG=mainline
          PUSH=false
          if [[ $GITHUB_REF == refs/tags/dockerfile/* ]]; then
            TYP=tag
            TAG=${GITHUB_REF#refs/tags/}
            PUSH=push
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            PUSH=push
          fi
          echo "typ=${TYP}" >>${GITHUB_OUTPUT}
          echo "tag=${TAG}" >>${GITHUB_OUTPUT}
          echo "push=${PUSH}" >>${GITHUB_OUTPUT}

  frontend-image:
    runs-on: ubuntu-20.04
    if: github.event_name != 'schedule'
    needs: [frontend-base, test]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Login to DockerHub
        uses: docker/login-action@v2
        if: needs.frontend-base.outputs.push == 'push'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build ${{ needs.frontend-base.outputs.typ }}/${{ needs.frontend-base.outputs.tag }}
        run: |
          ./frontend/dockerfile/cmd/dockerfile-frontend/hack/release "${{ needs.frontend-base.outputs.typ }}" "${{ needs.frontend-base.outputs.tag }}" "$DF_REPO_SLUG_TARGET" "${{ needs.frontend-base.outputs.push }}"
        env:
          PLATFORMS: ${{ env.PLATFORMS }},linux/mips,linux/mipsle,linux/mips64,linux/mips64le
          CACHE_FROM: type=gha,scope=frontend-${{ needs.frontend-base.outputs.typ }}
          CACHE_TO: type=gha,scope=frontend-${{ needs.frontend-base.outputs.typ }}
      -
        name: Build ${{ needs.frontend-base.outputs.typ }}/labs
        if: needs.frontend-base.outputs.typ == 'master'
        run: |
          ./frontend/dockerfile/cmd/dockerfile-frontend/hack/release "${{ needs.frontend-base.outputs.typ }}" labs "$DF_REPO_SLUG_TARGET" "${{ needs.frontend-base.outputs.push }}"
        env:
          PLATFORMS: ${{ env.PLATFORMS }},linux/mips,linux/mipsle,linux/mips64,linux/mips64le
          CACHE_FROM: type=gha,scope=frontend-${{ needs.frontend-base.outputs.typ }}

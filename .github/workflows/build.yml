name: build

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 10 * * *'  # everyday at 10am
  workflow_dispatch:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
      - 'dockerfile/*'
  pull_request:
    branches:
      - 'master'
      - 'v*'

env:
  REPO_SLUG_ORIGIN: "moby/buildkit:latest"
  REPO_SLUG_TARGET: "moby/buildkit"
  DF_REPO_SLUG_TARGET: "docker/dockerfile-upstream"
  PLATFORMS: "linux/amd64,linux/arm/v7,linux/arm64,linux/s390x,linux/ppc64le,linux/riscv64"
  CACHE_GHA_SCOPE_IT: "integration-tests"
  CACHE_GHA_SCOPE_BINARIES: "binaries"
  CACHE_GHA_SCOPE_CROSS: "cross"
  GO_VERSION: "1.18"  # same as one in Dockerfile
  GOTESTSUM_VERSION: "v1.8.1"  # same as one in Dockerfile
  BUILDX_VERSION: "v0.8.2"  # leave empty to use the one available on GitHub virtual environment
  TESTSTAT_VERSION: "v0.1.3"

jobs:
  base:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v1
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Build ${{ env.CACHE_GHA_SCOPE_BINARIES }}
        run: |
          ./hack/build_ci_first_pass binaries
        env:
          CACHE_FROM: type=gha,scope=${{ env.CACHE_GHA_SCOPE_BINARIES }}
          CACHE_TO: type=gha,scope=${{ env.CACHE_GHA_SCOPE_BINARIES }}
      -
        name: Build ${{ env.CACHE_GHA_SCOPE_IT }}
        run: |
          ./hack/build_ci_first_pass integration-tests
        env:
          CACHE_FROM: type=gha,scope=${{ env.CACHE_GHA_SCOPE_IT }}
          CACHE_TO: type=gha,scope=${{ env.CACHE_GHA_SCOPE_IT }}

  test:
    runs-on: ubuntu-latest
    needs: [base]
    strategy:
      fail-fast: false
      matrix:
        pkg:
          - ./client ./cmd/buildctl ./worker/containerd ./solver ./frontend
          - ./frontend/dockerfile
        worker:
          - containerd
          - containerd-rootless
          - containerd-1.5
          - containerd-1.4
          - containerd-snapshotter-stargz
          - oci
          - oci-rootless
          - oci-snapshotter-stargz
        typ:
          - integration
          - dockerfile
        exclude:
          - pkg: ./client ./cmd/buildctl ./worker/containerd ./solver ./frontend
            typ: dockerfile
        include:
          - pkg: ./...
            skip-integration-tests: 1
            typ: integration gateway
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v1
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Test pkg=${{ matrix.pkg }} ; typ=${{ matrix.typ }} ; skipit=${{ matrix.skip-integration-tests }} ; worker=${{ matrix.worker }}
        run: |
          export TEST_REPORT_SUFFIX=-${{ github.job }}-$(echo "${{ matrix.pkg }}-${{ matrix.skip-integration-tests }}-${{ matrix.typ }}-${{ matrix.worker }}" | tr -dc '[:alnum:]-\n\r' | tr '[:upper:]' '[:lower:]')
          export TESTFLAGS="-v --parallel=6 --timeout=30m"
          if [ -n "${{ matrix.worker }}" ]; then
            export TESTFLAGS="${TESTFLAGS} --run=//worker=${{ matrix.worker }}$"
          fi
          ./hack/test ${{ matrix.typ }}
        env:
          TESTPKGS: ${{ matrix.pkg }}
          SKIP_INTEGRATION_TESTS: ${{ matrix.skip-integration-tests }}
          CACHE_FROM: type=gha,scope=${{ env.CACHE_GHA_SCOPE_IT }} type=gha,scope=${{ env.CACHE_GHA_SCOPE_BINARIES }}
      -
        name: Send to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./bin/testreports
      -
        name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: ./bin/testreports

  test-s3:
    runs-on: ubuntu-latest
    needs:
      - base
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Test
        run: |
          hack/s3_test/run_test.sh

  test-os:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          # - ubuntu-latest
          # - macOS-latest
          - windows-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      -
        name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      -
        name: Install gotestsum
        run: |
          go install gotest.tools/gotestsum@${{ env.GOTESTSUM_VERSION }}
      -
        name: Go mod
        run: |
          go mod download
      -
        name: Test
        env:
          TMPDIR: ${{ runner.temp }}
          SKIP_INTEGRATION_TESTS: 1
        run: |
          TEST_REPORT_SUFFIX=-${{ github.job }}-${{ matrix.os }}
          mkdir -p ./bin/testreports
          gotestsum \
            --format=standard-verbose \
            --jsonfile="./bin/testreports/go-test-report${TEST_REPORT_SUFFIX}.json" \
            --junitfile="./bin/testreports/junit-report${TEST_REPORT_SUFFIX}.xml" \
            --packages="./..." \
            -- \
              "-coverprofile" "./bin/testreports/coverage-report${TEST_REPORT_SUFFIX}.txt" \
              "-covermode" "atomic"
        shell: bash
      -
        name: Send to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./bin/testreports
      -
        name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: ./bin/testreports

  test-report:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - test
      - test-os
    strategy:
      fail-fast: false
      matrix:
        filter:
          - unit
          - integration-containerd
          - integration-containerd-14
          - integration-containerd-15
          - integration-containerd-rootless
          - integration-containerd-snapshotter-stargz
          - integration-oci
          - integration-oci-rootless
          - integration-oci-snapshotter-stargz
    steps:
      -
        name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      -
        name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: test-reports
          path: /tmp/testreports
      -
        name: Install teststat
        run: |
          go install github.com/vearutop/teststat@${{ env.TESTSTAT_VERSION }}
      -
        name: Filter test reports
        run: |
          filter=(! -name "*${{ matrix.filter}}.*")
          if [ "${{ matrix.filter}}" = "unit" ]; then
            filter=(! -name "*integrationgateway-.*" -a ! -name "*test-os-*.*")
          fi
          find /tmp/testreports -type f ${filter[@]} -delete
      -
        name: Run test-summary
        uses: test-summary/action@v1
        with:
          paths: /tmp/testreports/**/*.xml
      -
        name: Run teststat
        run: |
          teststat -markdown $(find /tmp/testreports -type f -name "*.json" -print0 | xargs -0) >> $GITHUB_STEP_SUMMARY

  cross:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v1
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Cross
        run: |
          ./hack/cross
        env:
          PLATFORMS: ${{ env.PLATFORMS }},darwin/amd64,darwin/arm64,windows/amd64,windows/arm64
          RUNC_PLATFORMS: ${{ env.PLATFORMS }}
          CACHE_FROM: type=gha,scope=${{ env.CACHE_GHA_SCOPE_CROSS }}
          CACHE_TO: type=gha,scope=${{ env.CACHE_GHA_SCOPE_CROSS }}

  release-base:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.prep.outputs.tag }}
      push: ${{ steps.prep.outputs.push }}
    steps:
      - name: Prepare
        id: prep
        run: |
          TAG=pr
          PUSH=false
          if [ "${{ github.event_name }}" = "schedule" ]; then
            TAG=nightly
            PUSH=push
          elif [[ $GITHUB_REF == refs/tags/v* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            PUSH=push
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            TAG=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            PUSH=push
          fi
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=push::${PUSH}

  image:
    runs-on: ubuntu-latest
    needs: [release-base, test, cross]
    strategy:
      fail-fast: false
      matrix:
        target-stage:
          - ''
          - rootless
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v1
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Login to DockerHub
        if: needs.release-base.outputs.push == 'push'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build ${{ needs.release-base.outputs.tag }}
        run: |
          ./hack/images "${{ needs.release-base.outputs.tag }}" "$REPO_SLUG_TARGET" "${{ needs.release-base.outputs.push }}"
        env:
          TARGET: ${{ matrix.target-stage }}
          CACHE_FROM: type=gha,scope=${{ env.CACHE_GHA_SCOPE_CROSS }} type=gha,scope=image${{ matrix.target-stage }}
          CACHE_TO: type=gha,scope=image${{ matrix.target-stage }}

  binaries:
    runs-on: ubuntu-latest
    needs: [release-base, test, cross]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v1
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Build ${{ needs.release-base.outputs.tag }}
        run: |
          ./hack/release-tar "${{ needs.release-base.outputs.tag }}" release-out
        env:
          PLATFORMS: ${{ env.PLATFORMS }},darwin/amd64,darwin/arm64,windows/amd64,windows/arm64
          CACHE_FROM: type=gha,scope=${{ env.CACHE_GHA_SCOPE_BINARIES }} type=gha,scope=${{ env.CACHE_GHA_SCOPE_CROSS }}
      -
        name: Move artifacts
        run: |
          mv ./release-out/**/* ./release-out/
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: buildkit
          path: ./release-out/*
          if-no-files-found: error
      -
        name: GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: ./release-out/*
          name: ${{ needs.release-base.outputs.tag }}

  frontend-base:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    outputs:
      typ: ${{ steps.prep.outputs.typ }}
      tag: ${{ steps.prep.outputs.tag }}
      push: ${{ steps.prep.outputs.push }}
    steps:
      -
        name: Prepare
        id: prep
        run: |
          TYP=master
          TAG=mainline
          PUSH=false
          if [[ $GITHUB_REF == refs/tags/dockerfile/* ]]; then
            TYP=tag
            TAG=${GITHUB_REF#refs/tags/}
            PUSH=push
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            PUSH=push
          fi
          echo ::set-output name=typ::${TYP}
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=push::${PUSH}

  frontend-image:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    needs: [frontend-base, test]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v1
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.BUILDX_VERSION }}
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        if: needs.frontend-base.outputs.push == 'push'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build ${{ needs.frontend-base.outputs.typ }}/${{ needs.frontend-base.outputs.tag }}
        run: |
          ./frontend/dockerfile/cmd/dockerfile-frontend/hack/release "${{ needs.frontend-base.outputs.typ }}" "${{ needs.frontend-base.outputs.tag }}" "$DF_REPO_SLUG_TARGET" "${{ needs.frontend-base.outputs.push }}"
        env:
          CACHE_FROM: type=gha,scope=frontend-${{ needs.frontend-base.outputs.typ }}
          CACHE_TO: type=gha,scope=frontend-${{ needs.frontend-base.outputs.typ }}
      -
        name: Build ${{ needs.frontend-base.outputs.typ }}/labs
        if: needs.frontend-base.outputs.typ == 'master'
        run: |
          ./frontend/dockerfile/cmd/dockerfile-frontend/hack/release "${{ needs.frontend-base.outputs.typ }}" labs "$DF_REPO_SLUG_TARGET" "${{ needs.frontend-base.outputs.push }}"
        env:
          CACHE_FROM: type=gha,scope=frontend-${{ needs.frontend-base.outputs.typ }}
